{"ast":null,"code":"var _jsxFileName = \"/Users/zainmukati/Desktop/Expense_Tracker_React/react_tut/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport './ExpenseForm.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // intial state can be represented by an empty string\n  // const [enteredTitle, setEnteredTitle] = useState('');\n  // const [enteredAmount, setEnteredAmount] = useState('');\n  // const [enteredDate, setEnteredDate] = useState('');\n  const [userInput, setUserInput] = useState({\n    enteredTitle: '',\n    enteredAmount: '',\n    enteredDate: ''\n  }); // get the current value with every keystroke\n\n  const titleChangeHandler = event => {\n    // this react below simply schedules an update while the new function  below immedialtley executes the update, which is essential sinnce schedfuling an update can lead \n    // to a stale state being used to create the new state\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value\n    // })\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredTitle: event.target.value\n      };\n    });\n  }; // get triggered when amount is chaned on page\n\n\n  const amountChangeHandler = event => {\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value\n    // })\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredAmount: event.target.value\n      };\n    });\n  };\n\n  const dateChangeHandler = event => {\n    // setUserInput({\n    //     ...userInput, // copies over previous data to the new state, overrides previous entered date value\n    //     enteredDate: event.target.value\n    // })\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredDate: event.target.value\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Title \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Amount \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"omnzXvFFMBNxqRLyq07TYmz0ypQ=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/zainmukati/Desktop/Expense_Tracker_React/react_tut/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","prevState","target","value","amountChangeHandler","dateChangeHandler"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB;AACA;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;AACvCI,IAAAA,YAAY,EAAG,EADwB;AAEvCC,IAAAA,aAAa,EAAE,EAFwB;AAGvCC,IAAAA,WAAW,EAAC;AAH2B,GAAD,CAA1C,CALsB,CAatB;;AACA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACAL,IAAAA,YAAY,CAAEM,SAAD,IAAc;AACvB,aAAO,EAAC,GAAGA,SAAJ;AAAeL,QAAAA,YAAY,EAACI,KAAK,CAACE,MAAN,CAAaC;AAAzC,OAAP;AACH,KAFW,CAAZ;AAGH,GAVD,CAdsB,CAyBtB;;;AACA,QAAMC,mBAAmB,GAAIJ,KAAD,IAAW;AACnC;AACA;AACA;AACA;AACAL,IAAAA,YAAY,CAAEM,SAAD,IAAc;AACvB,aAAO,EAAC,GAAGA,SAAJ;AAAeJ,QAAAA,aAAa,EAACG,KAAK,CAACE,MAAN,CAAaC;AAA1C,OAAP;AACH,KAFW,CAAZ;AAGH,GARD;;AASA,QAAME,iBAAiB,GAAIL,KAAD,IAAW;AACjC;AACA;AACA;AACA;AACAL,IAAAA,YAAY,CAAEM,SAAD,IAAc;AACvB,aAAO,EAAC,GAAGA,SAAJ;AAAeH,QAAAA,WAAW,EAACE,KAAK,CAACE,MAAN,CAAaC;AAAxC,OAAP;AACH,KAFW,CAAZ;AAGH,GARD;;AAUA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEJ;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,QAAQ,EAAEK;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eASI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAeI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAlED;;GAAMZ,W;;KAAAA,W;AAoEN,eAAeA,WAAf","sourcesContent":["import './ExpenseForm.css';\nimport React, {useState} from 'react';\nconst ExpenseForm = () => {\n    // intial state can be represented by an empty string\n    // const [enteredTitle, setEnteredTitle] = useState('');\n    // const [enteredAmount, setEnteredAmount] = useState('');\n    // const [enteredDate, setEnteredDate] = useState('');\n    const [userInput, setUserInput] = useState({\n        enteredTitle : '',\n        enteredAmount: '',\n        enteredDate:''\n\n\n    });\n\n    // get the current value with every keystroke\n    const titleChangeHandler = (event) => {\n        // this react below simply schedules an update while the new function  below immedialtley executes the update, which is essential sinnce schedfuling an update can lead \n        // to a stale state being used to create the new state\n        // setUserInput({\n        //     ...userInput,\n        //     enteredTitle: event.target.value\n        // })\n        setUserInput((prevState) =>{\n            return {...prevState, enteredTitle:event.target.value}\n        })\n    }\n    // get triggered when amount is chaned on page\n    const amountChangeHandler = (event) => {\n        // setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value\n        // })\n        setUserInput((prevState) =>{\n            return {...prevState, enteredAmount:event.target.value}\n        })\n    }\n    const dateChangeHandler = (event) => {\n        // setUserInput({\n        //     ...userInput, // copies over previous data to the new state, overrides previous entered date value\n        //     enteredDate: event.target.value\n        // })\n        setUserInput((prevState) =>{\n            return {...prevState, enteredDate:event.target.value}\n        })\n    }\n\n    return (\n        <form>\n            <div className=\"new-expense__controls\"> \n                <div className=\"new-expense__control\">\n                    <label> Title </label>\n                    <input type=\"text\" onChange={titleChangeHandler}></input>\n                </div>\n                <div className=\"new-expense__control\">\n                    <label> Amount </label>\n                    <input type=\"number\" onChange={amountChangeHandler}></input>\n                </div>\n                <div className=\"new-expense__control\">\n                    <label> Date</label>\n                    <input type=\"date\" onChange={dateChangeHandler}></input>\n                </div>\n            </div>\n            <div>\n                <button>Add Expense</button>\n            </div>\n        </form>\n    )\n};\n\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}